rm -rf "$HOME/.yarn"
npm i --global yarn@1.22.19
yarn
yarn add -D @types/http-errors @types/cookie-parser @types/morgan
yarn add -D nodemon
mkdir ./src/controllers ./src/services
yarn build
yarn dev
// to compile => yarn tsc
// To compile automatically => On another window, yarn tsc -w or yarn tsc --watch

For users to be created
{
    "userName": "John Mike",
    "email": "mike@gmail.com",
    "password": "12345"
}

///// TEST TEST TEST

import request from "supertest";
import app from "../src/app";

describe("TEST FOR POST METHODS API", () => {
  test("Should return 201 for created Company", async () => {
    const data = {
      title: "Aahme Linkon",
      author: "Barack John",
      description: "The Heaven is the real deal",
      pageCount: 100,
      genre: "Grama",
      publisher: "Crowniw",
    };
    await request(app)
      .post("/company")
      .send(data)
      .expect("Content-Type", "application/json; charset=utf-8")
      .expect(201);
  });

  test("Should return 400 for invalid data upload", async () => {
    const data = "fake data";
    await request(app)
      .post("/company")
      .send(data)
      .expect("Content-Type", "application/json; charset=utf-8")
      .expect(400);
  });
});

describe("TEST THE GET METHODS FOR API", () => {
  test("should return 200, and json for all companies", async () => {
    await request(app)
      .get("/company")
      .set("Accept", "application/json")
      .expect("Content-Type", "application/json; charset=utf-8")
      .expect(200);
  });

  test("Should return 200, and json for single company by id", async () => {
    await request(app)
      .get("/company/1")
      .expect("Content-Type", "application/json; charset=utf-8")
      .expect(200);
  });

  test("Should return 404 for invalid id", async () => {
    await request(app)
      .get("/company/chi")
      .expect("Content-Type", "application/json; charset=utf-8")
      .expect(404);
  });
});

describe("TEST FOR PUT METHOD API", () => {
  test("Should return 201 for updating", async () => {
    const data = {
        title: "Aahme Linkon",
        author: "Barack John",
        description: "The Heaven is the real deal",
        pageCount: 100,
        genre: "Grama",
        publisher: "Crowniw",
    };
    await request(app)
      .put("/company/1")
      .send(data)
      .expect("Content-Type", "application/json; charset=utf-8")
      .expect(201);
  });

  test("Should return 400 invalid id", async () => {
    await request(app)
      .put("/company/99")
      .expect("Content-Type", "application/json; charset=utf-8")
      .expect(400);
  });
});

describe("TEST FOR DELETE METHOD API", () => {
  test("Should return 200 for deleted Company", async () => {
    await request(app)
      .delete("/company/1")
      .expect("Content-Type", "application/json; charset=utf-8")
      .expect(200);
  });

  test("Should return 404 for invalid 1d", async () => {
    await request(app)
      .delete("/company/1")
      .expect("Content-Type", "application/json; charset=utf-8")
      .expect(404);
  });
});
